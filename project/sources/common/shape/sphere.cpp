//*****************************************************************************
//
// sphere
//
// Author		: Kenji Kabutomori
//
//*****************************************************************************

//*****************************************************************************
// include
//*****************************************************************************
#include "sphere.h"
#include "math/math.h"

namespace common
{
namespace shape
{

//=============================================================================
// constructor
//=============================================================================
Sphere::Sphere(void)
	:Shape(TYPE_SPHERE)
	,radius_(0.0f)
{
}

//=============================================================================
// constructor
//=============================================================================
Sphere::Sphere(const float3& in_position,f32 in_radius)
	:Shape(TYPE_SPHERE,in_position)
	,radius_(in_radius)
{
}

//=============================================================================
// destructor
//=============================================================================
Sphere::~Sphere(void)
{
}

//=============================================================================
// is collide
//=============================================================================
bool Sphere::IsCollide(const Shape* in_shape)const
{
	return in_shape->IsCollide(this);
}

//=============================================================================
// is collide
//=============================================================================
bool Sphere::IsCollide(const Line* in_line)const
{
	DEBUG_TRACE("not implemented\n");

	return false;
}

//=============================================================================
// is collide
//=============================================================================
bool Sphere::IsCollide(const Sphere* in_sphere)const
{
	f32 distance = math::Distance(position_,in_sphere->__position());
	f32 radius = radius_ + in_sphere->__radius();

	if(radius > distance)
	{
		return true;
	}

	return false;
}

} // namespace shape
} // namespace common

//---------------------------------- EOF --------------------------------------
