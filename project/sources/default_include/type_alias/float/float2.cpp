//*****************************************************************************
//
// float2
//
// Author		: Kenji Kabutomori
//
//*****************************************************************************

//*****************************************************************************
// include
//*****************************************************************************
#include "float2.h"

//=============================================================================
// constructor
//=============================================================================
float2::float2(f32 xy)
{
	_x = xy;
	_y = xy;
}

//=============================================================================
// constructor
//=============================================================================
float2::float2(f32 x,f32 y)
{
	_x = x;
	_y = y;
}

//=============================================================================
// constructor
//=============================================================================
float2::float2(const float2& xy)
{
	_x = xy._x;
	_y = xy._y;
}

//=============================================================================
// operator
//=============================================================================
float2 float2::operator+(void)const
{
	return *this;
}

//=============================================================================
// operator
//=============================================================================
float2 float2::operator-(void)const
{
	return float2(-_x,-_y);
}

//=============================================================================
// operator
//=============================================================================
float2 float2::operator*(const f32& value)const
{
	return float2(_x * value,_y * value);
}

//=============================================================================
// operator
//=============================================================================
float2 float2::operator/(const f32& value)const
{
	f32 inv = 1.0f;

	if(value != 0.0f)
	{
		inv /= value;
	}

	return float2(_x * inv,_y * inv);
}

//=============================================================================
// operator
//=============================================================================
void float2::operator*=(const f32& value)
{
	_x *= value;
	_y *= value;
}

//=============================================================================
// operator
//=============================================================================
void float2::operator/=(const f32& value)
{
	f32 inv = 1.0f;

	if(value != 0.0f)
	{
		inv /= value;
	}

	_x *= inv;
	_y *= inv;
}

//=============================================================================
// operator
//=============================================================================
float2 float2::operator+(const float2& xy)const
{
	return float2(_x + xy._x,_y + xy._y);
}

//=============================================================================
// operator
//=============================================================================
float2 float2::operator-(const float2& xy)const
{
	return float2(_x - xy._x,_y - xy._y);
}

//=============================================================================
// operator
//=============================================================================
float2 float2::operator*(const float2& xy)const
{
	return float2(_x * xy._x,_y * xy._y);
}

//=============================================================================
// operator
//=============================================================================
float2 float2::operator/(const float2& xy)const
{
	float2 ret;

	if(xy._x != 0.0f)
	{
		ret._x = _x / xy._x;
	}

	if(xy._y != 0.0f)
	{
		ret._y = _y / xy._y;
	}

	return ret;
}

//=============================================================================
// operator
//=============================================================================
void float2::operator+=(const float2& xy)
{
	_x += xy._x;
	_y += xy._y;
}

//=============================================================================
// operator
//=============================================================================
void float2::operator-=(const float2& xy)
{
	_x -= xy._x;
	_y -= xy._y;
}

//=============================================================================
// operator
//=============================================================================
void float2::operator*=(const float2& xy)
{
	_x *= xy._x;
	_y *= xy._y;
}

//=============================================================================
// operator
//=============================================================================
void float2::operator/=(const float2& xy)
{
	if(xy._x != 0.0f)
	{
		_x /= xy._x;
	}
	else
	{
		_x = 0.0f;
	}
	if(xy._y != 0.0f)
	{
		_y /= xy._y;
	}
	else
	{
		_y = 0.0f;
	}
}

//-----------------------------------EOF---------------------------------------
