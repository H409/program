//*****************************************************************************
//
// action
//
// Author		: Kenji Kabutomori
//
//*****************************************************************************

//*****************************************************************************
// include
//*****************************************************************************
#include "action.h"

namespace action {
//=============================================================================
// constructor
//=============================================================================
Action::Action(void)
	:Action(0)
{
}

//=============================================================================
// constructor
//=============================================================================
Action::Action(const u32& in_duration)
	:duration_(in_duration)
	,time_count_(0)
	,is_end_(false)
	,param_()
{
}

//=============================================================================
// update
//=============================================================================
void Action::Update(void)
{
	Update(1);
}

//=============================================================================
// update
//=============================================================================
u32 Action::Update(const u32& in_delta_time)
{
	auto over_time = static_cast<u32>(0);
	if(is_pause_)
	{
		if(!IsEnd())
		{
			if(duration_ > 0)
			{
				time_count_ += in_delta_time;

				if(time_count_ >= duration_)
				{
					over_time = time_count_ - duration_;
					time_count_ = duration_;
					is_end_ = true;
				}
			}

			Update_(in_delta_time);
		}
	}
	return over_time;
}

//=============================================================================
// set start param
//=============================================================================
void Action::SetStartParam(const PARAM& in_param)
{
	SetStartParam_(in_param);
	start_param_ = in_param;
	param_ = in_param;
}

//=============================================================================
// set position
//=============================================================================
void Action::SetStartPosition(const float3 & in_position)
{
	start_param_._position = in_position;
	param_._position = in_position;
	SetStartParam(param_);
}

//=============================================================================
// is pause
//=============================================================================
bool Action::IsPause(void) const
{
	return is_pause_;
}

//=============================================================================
// resume
//=============================================================================
void Action::Resume(void)
{
	is_pause_ = false;
}

//=============================================================================
// pause
//=============================================================================
void Action::Pause(void)
{
	is_pause_ = true;
}

//=============================================================================
// get position
//=============================================================================
const float3& Action::GetPosition(void) const
{
	return param_._position;
}

//=============================================================================
// get time
//=============================================================================
const u32 & Action::GetTime(void) const
{
	return time_count_;
}

//=============================================================================
// get param
//=============================================================================
const Action::PARAM& Action::GetParam(void) const
{
	return param_;
}

//=============================================================================
// is end
//=============================================================================
bool Action::IsEnd(void)const
{
	return is_end_;
}

//=============================================================================
// get reverse
//=============================================================================
Action::TAction Action::GetReverse(void) const
{
	DEBUG_ASSERT_MESSAGE(false,"–¢‘Î‰ž");
	return nullptr;
}

} // namespace action

//---------------------------------- EOF --------------------------------------
