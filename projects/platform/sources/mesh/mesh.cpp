//*****************************************************************************
//
// mesh
//
// Author		: Kenji Kabutomori
//
//*****************************************************************************

//*****************************************************************************
// include
//*****************************************************************************
#include "mesh.h"

//=============================================================================
// get buffer
//=============================================================================
const LPDIRECT3DVERTEXBUFFER9 Mesh::GetBuffer(void)const
{
	return direct3dvertexbuffer9_;
}

//=============================================================================
// get index buffer
//=============================================================================
const LPDIRECT3DINDEXBUFFER9 Mesh::GetIndexBuffer(void) const
{
	return direct3dindexbuffer9_;
}

//=============================================================================
// get stride
//=============================================================================
const u32& Mesh::GetStride(void)const
{
	return stride_;
}

//=============================================================================
// get primitive type
//=============================================================================
const D3DPRIMITIVETYPE& Mesh::GetPrimitiveType(void)const
{
	return primitive_type_;
}

//=============================================================================
// get vertex count
//=============================================================================
const u32 & Mesh::GetVertexCount(void) const
{
	return vertex_count_;
}

//=============================================================================
// get primitive count
//=============================================================================
const u32& Mesh::GetPrimitiveCount(void)const
{
	return primitive_count_;
}

//=============================================================================
// is used index buffer
//=============================================================================
bool Mesh::IsUsedIndexBuffer(void)const
{
	return is_used_index_buffer_;
}

//=============================================================================
// is 3D
//=============================================================================
bool Mesh::Is3D(void) const
{
	return is_3d_;
}

//---------------------------------- EOF --------------------------------------
