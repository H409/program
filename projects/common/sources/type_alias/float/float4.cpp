//*****************************************************************************
//
// float4
//
// Author		: Kenji Kabutomori
//
//*****************************************************************************

//*****************************************************************************
// include
//*****************************************************************************
#include "float4.h"

//=============================================================================
// constructor
//=============================================================================
float4::float4(f32 x,f32 y,f32 z,f32 w)
{
	_x = x;
	_y = y;
	_z = z;
	_w = w;
}

//=============================================================================
// constructor
//=============================================================================
float4::float4(const float2& xy,f32 z,f32 w)
{
	_xy = xy;
	_z = z;
	_w = w;
}

//=============================================================================
// constructor
//=============================================================================
float4::float4(const float3& xyz,f32 w)
{
	_xyz = xyz;
	_w = w;
}

//=============================================================================
// constructor
//=============================================================================
float4::float4(const float4& xyzw)
{
	_xyz = xyzw._xyz;
	_w = xyzw._w;
}

//=============================================================================
// operator
//=============================================================================
float4 float4::operator+(void)const
{
	return *this;
}

//=============================================================================
// operator
//=============================================================================
float4 float4::operator-(void)const
{
	return float4(-_xyz,-_w);
}

//=============================================================================
// operator
//=============================================================================
float4 float4::operator*(const f32& value)const
{
	return float4(_xyz * value,_w * value);
}

//=============================================================================
// operator
//=============================================================================
float4 float4::operator/(const f32& value)const
{
	f32 inv = 1.0f;

	if(value != 0.0f)
	{
		inv /= value;
	}

	return float4(_xyz * inv,_w * inv);
}

//=============================================================================
// operator
//=============================================================================
void float4::operator*=(const f32& value)
{
	_xyz *= value;
	_w *= value;
}

//=============================================================================
// operator
//=============================================================================
void float4::operator/=(const f32& value)
{
	f32 inv = 1.0f;

	if(value != 0.0f)
	{
		inv /= value;
	}

	_xyz *= inv;
	_w *= inv;
}

//=============================================================================
// operator
//=============================================================================
float4 float4::operator+(const float4& xyzw)const
{
	return float4(_xyz + xyzw._xyz,_w + xyzw._w);
}

//=============================================================================
// operator
//=============================================================================
float4 float4::operator-(const float4& xyzw)const
{
	return float4(_xyz - xyzw._xyz,_w - xyzw._w);
}

//=============================================================================
// operator
//=============================================================================
float4 float4::operator*(const float4& xyzw)const
{
	return float4(_xyz * xyzw._xyz,_w * xyzw._w);
}

//=============================================================================
// operator
//=============================================================================
float4 float4::operator/(const float4& xyzw)const
{
	if(xyzw._w == 0.0f)
	{
		return float4(_xyz / xyzw._xyz,0.0f);
	}

	return float4(_xyz / xyzw._xyz,_w / xyzw._w);
}

//=============================================================================
// operator
//=============================================================================
void float4::operator+=(const float4& xyzw)
{
	_xyz += xyzw._xyz;
	_w += xyzw._w;
}

//=============================================================================
// operator
//=============================================================================
void float4::operator-=(const float4& xyzw)
{
	_xyz -= xyzw._xyz;
	_w -= xyzw._w;
}

//=============================================================================
// operator
//=============================================================================
void float4::operator*=(const float4& xyzw)
{
	_xyz *= xyzw._xyz;
	_w *= xyzw._w;
}

//=============================================================================
// operator
//=============================================================================
void float4::operator/=(const float4& xyzw)
{
	_xyz /= xyzw._xyz;

	if(xyzw._w != 0.0f)
	{
		_w /= xyzw._w;
	}
	else
	{
		_w = 0.0f;
	}
}

//-----------------------------------EOF---------------------------------------
