//*****************************************************************************
//
// float4x4
//
// Author		: Kenji Kabutomori
//
//*****************************************************************************

//*****************************************************************************
// include
//*****************************************************************************
#include "float4x4.h"

//=============================================================================
// constructor
//=============================================================================
float4x4::float4x4(void)
{
	_11 = 1.0f;_12 = 0.0f;_13 = 0.0f;_14 = 0.0f;
	_21 = 0.0f;_22 = 1.0f;_23 = 0.0f;_24 = 0.0f;
	_31 = 0.0f;_32 = 0.0f;_33 = 1.0f;_34 = 0.0f;
	_41 = 0.0f;_42 = 0.0f;_43 = 0.0f;_44 = 1.0f;
}

//=============================================================================
// constructor
//=============================================================================
float4x4::float4x4(const float4x4 & in_float4x4)
{
	_11 = in_float4x4._11;_12 = in_float4x4._12;_13 = in_float4x4._13;_14 = in_float4x4._14;
	_21 = in_float4x4._21;_22 = in_float4x4._22;_23 = in_float4x4._23;_24 = in_float4x4._24;
	_31 = in_float4x4._31;_32 = in_float4x4._32;_33 = in_float4x4._33;_34 = in_float4x4._34;
	_41 = in_float4x4._41;_42 = in_float4x4._42;_43 = in_float4x4._43;_44 = in_float4x4._44;
}

//=============================================================================
// operator
//=============================================================================
float4x4 float4x4::operator+(void)const
{
	return *this;
}

//=============================================================================
// operator
//=============================================================================
float4x4 float4x4::operator-(void)const
{
	float4x4 matrix;

	matrix._m[0] = -_m[0];
	matrix._m[1] = -_m[1];
	matrix._m[2] = -_m[2];
	matrix._m[3] = -_m[3];

	return matrix;
}

//=============================================================================
// operator
//=============================================================================
float4x4 float4x4::operator*(const f32& value)const
{
	float4x4 matrix;

	matrix._m[0] = _m[0] * value;
	matrix._m[1] = _m[1] * value;
	matrix._m[2] = _m[2] * value;
	matrix._m[3] = _m[3] * value;

	return matrix;
}

//=============================================================================
// operator
//=============================================================================
float4x4 float4x4::operator/(const f32& value)const
{
	f32 inv = 1.0f;
	float4x4 matrix;

	if(value != 0.0f)
	{
		inv /= value;
	}

	matrix._m[0] = _m[0] * inv;
	matrix._m[1] = _m[1] * inv;
	matrix._m[2] = _m[2] * inv;
	matrix._m[3] = _m[3] * inv;

	return matrix;
}

//=============================================================================
// operator
//=============================================================================
void float4x4::operator*=(const f32& value)
{
	_m[0] *= value;
	_m[1] *= value;
	_m[2] *= value;
	_m[3] *= value;
}

//=============================================================================
// operator
//=============================================================================
void float4x4::operator/=(const f32& value)
{
	f32 inv = 1.0f;

	if(value != 0.0f)
	{
		inv /= value;
	}

	_m[0] *= inv;
	_m[1] *= inv;
	_m[2] *= inv;
	_m[3] *= inv;

}

//-----------------------------------EOF---------------------------------------
