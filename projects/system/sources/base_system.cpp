//*****************************************************************************
//
// base system
//
// Author		: Kenji Kabutomori
//
//*****************************************************************************

//*****************************************************************************
// include
//*****************************************************************************
#include "base_system.h"

//*****************************************************************************
// constant definition
//*****************************************************************************

//=============================================================================
// constructor
//=============================================================================
BaseSystem::BaseSystem(void)
	:window_(nullptr)
	,graphic_device_(nullptr)
{
}

//=============================================================================
// destructor
//=============================================================================
BaseSystem::~BaseSystem(void)
{
}

//=============================================================================
// set callback
//=============================================================================
void BaseSystem::SetCallback(const EVENT& in_event,TCallback in_callback)
{
	auto it = callbacks_.find(in_event);

	if(it != callbacks_.end())
	{
		it->second.push_back(in_callback);
		return;
	}

	TCallbacks callbacks;

	callbacks.push_back(in_callback);

	callbacks_.insert(std::make_pair(in_event,callbacks));
}

//=============================================================================
// get graphic device
//=============================================================================
BaseSystem::TGraphicDevice BaseSystem::GetGraphicDevice(void)
{
	return graphic_device_;
}

//=============================================================================
// stop
//=============================================================================
void BaseSystem::Stop(void)
{
	auto it = callbacks_.find(EVENT::STOP);

	if(it != callbacks_.end())
	{
		auto callbacks = it->second;
		for(auto callback : callbacks)
		{
			callback();
		}
	}
}

//---------------------------------- EOF --------------------------------------
